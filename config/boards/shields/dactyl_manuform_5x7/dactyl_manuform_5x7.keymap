#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE0 0
#define SMB1 1
#define MED2 2

#define U_MOUSE_MOVE_MAX 1400
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)


/ {
    behaviors {
        ht_tp: hold_tap_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        base0_layer {
            bindings = <
                &kp EQUAL      &kp N1      &kp N2    &kp N3     &kp N4 &kp N5 &kp LG(UP)     &kp LG(DOWN)  &kp N6      &kp N7   &kp N8    &kp N9    &kp N0         &kp MINUS
                &kp TAB        &kp Q       &kp W     &kp E      &kp R  &kp T  &kp LG(LEFT)   &kp LG(RIGHT) &kp Y       &kp U    &kp I     &kp O     &kp P          &ht_tp HASH BSLH
                &kp ESC        &lt MED2 A  &kp S     &kp D      &kp F  &kp G  &kp C          &kp C         &kp H       &kp J    &kp K     &kp L     &lt SMB1 SEMI  &mt RGUI SQT
                &kp LSHFT      &mt LCTRL Z &kp X     &kp C      &kp V  &kp B  &kp D          &kp LA(LCTRL) &kp N       &kp M    &kp COMMA &kp DOT   &mt RCTRL FSLH &kp RSHFT
                &lt SMB1 GRAVE &mo MED2    &kp LGUI  &kp LALT   &kp LCTRL                                              &kp LALT &kp RALT  &kp X     &mo MED2       &kp LC(A)
                                           &kp SPACE &kp BSPC                                              &kp TAB     &kp RET
                                                     &kp HOME &kp END                        &kp PG_UP     &kp PG_DN
                                                     &mo SMB1 &kp DEL                        &kp &trans    &mo SMB1
            >;
        };

        smb1_layer {
            bindings = <
                &kp ESC &kp F1    &kp F2    &kp F3   &kp F4   &kp F5    &trans                 &trans        &kp F6     &kp F7   &kp F8     &kp F9    &kp F10   &kp F11
                &trans  &kp EXCL  &kp AT    &kp LBRC &kp RBRC &kp PIPE  &kp LA(LEFT)           &kp LA(RIGHT) &trans     &trans   &trans     &trans    &trans    &kp F12
                &trans  &kp UNDER &kp EQUAL &kp LPAR &kp RPAR &kp DQT   &kp LA(LC(B))          &kp LA(N5)    &kp LEFT   &kp DOWN &kp UP     &kp RIGHT &trans    &trans
                &trans  &kp PLUS  &kp ASTRK &kp LBKT &kp RBKT &kp HASH  &trans                 &trans        &trans     &trans   &trans     &trans    &kp BSLH  &trans
                &trans  &kp CARET &trans    &trans   &trans                                                             &kp F8   &kp LS(F7) &kp F8    &kp F9    &kp SYSREQ
                                                     &trans   &trans                                         &kp LC(F8) &kp LA(RET)
                                                        &kp LA(LS(F10)) &kp LA(LS(F10))        &kp LS(F10)   &kp LS(F9)
                                                        &trans          &trans                 &trans        &trans
            >;
        };

        med2_layer {
            bindings = <
                &bootloader &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &trans          &trans &trans     &trans       &trans       &trans     &trans &bootloader
                &sys_reset  &bt BT_PRV   &bt BT_NXT   &trans       &trans &trans &trans          &trans &trans     &trans       &trans       &trans     &trans &sys_reset
                &bt BT_CLR  &trans       &trans       &trans       &trans &trans &trans          &trans &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT &trans &kp C_PP
                &trans      &trans       &trans       &trans       &trans &trans &trans          &trans &kp C_PREV &trans       &trans       &kp C_NEXT &trans &trans
                &trans      &trans       &trans       &trans       &trans                                          &kp C_VOL_UP &kp C_VOL_DN &kp C_MUTE &trans &trans
                                                                   &trans &trans                        &mkp LCLK &mkp RCLK
                                                                          &trans &trans          &trans &trans
                                                                          &trans &trans          &trans &trans
            >;
        };
    };
};
